// Declarative Jenkinsfile with no hardcoded values
def COLOR_MAP = [
    'SUCCESS': 'good',
    'FAILURE': 'danger',
    'ABORTED': 'warning',
    'UNSTABLE': 'warning',
]

pipeline {
    agent any
    tools {
        maven 'MAVEN_TOOL'        // Configured Maven tool in Jenkins
        jdk 'JDK_TOOL'            // Configured JDK tool in Jenkins
    }

    environment {
        SNAP_REPO       = credentials('SNAPSHOT_REPO')
        RELEASE_REPO    = credentials('RELEASE_REPO')
        CENTRAL_REPO    = credentials('CENTRAL_REPO')
        NEXUSIP         = credentials('NEXUS_IP')
        NEXUSPORT       = credentials('NEXUS_PORT')
        NEXUS_GRP_REPO  = credentials('NEXUS_GROUP')
        NEXUS_LOGIN     = credentials('NEXUS_CREDS')
        SONARSERVER     = 'SONAR_SERVER'
        SONARSCANNER    = 'SONAR_SCANNER'
        AZURE_CREDENTIALS = credentials('AZURE_CREDENTIALS')
        RESOURCE_GROUP  = 'AZURE_RESOURCE_GROUP'
        LOCATION        = 'AZURE_LOCATION'
        DOCKER_IMAGE    = 'DOCKER_IMAGE'
        DOCKER_TAG      = "v${env.BUILD_NUMBER}"
        DOCKER_REGISTRY = 'DOCKER_REGISTRY'
        DOCKER_CREDS    = 'DOCKER_CREDENTIALS'
        GIT_REPO        = 'GIT_REPO_URL'
        GIT_BRANCH      = 'GIT_BRANCH'
        GIT_CREDS       = 'GIT_CREDENTIALS'
    }

    stages {
        stage('Git Checkout'){
            steps {
                git branch: "${GIT_BRANCH}", credentialsId: "${GIT_CREDS}", url: "${GIT_REPO}"
            }
        }

        stage('Build') {
            steps {
                executeCommand('mvn -DskipTests clean install', 'Build failed')
            }
            post {
                success {
                    echo "Archiving build artifacts..."
                    archiveArtifacts artifacts: '**/*.war'
                }
            }
        }

        stage('Test') {
            steps {
                executeCommand('mvn test', 'Test failed')
            }
        }

        stage('OWASP Scan') {
            steps {
                dependencyCheck additionalArguments: '', odcInstallation: 'DP-check'
                dependencyCheckPublisher pattern: '**/dependency-check-report.xml'
            }
        }

        stage('Checkstyle Analysis') {
            steps {
                executeCommand('mvn checkstyle:checkstyle', 'Checkstyle analysis failed')
            }
        }

        stage('SonarQube Analysis') {
            environment {
                def scannerHome = tool "${SONARSCANNER}"
            }
            steps {
                withSonarQubeEnv("${SONARSERVER}") {
                    sh """
                        ${scannerHome}/bin/sonar-scanner \
                        -Dsonar.projectKey=${JOB_NAME} \
                        -Dsonar.projectName=${JOB_NAME} \
                        -Dsonar.projectVersion=${BUILD_NUMBER} \
                        -Dsonar.sources=src/ \
                        -Dsonar.java.binaries=target/test-classes/ \
                        -Dsonar.junit.reportsPath=target/surefire-reports/ \
                        -Dsonar.jacoco.reportsPath=target/jacoco.exec \
                        -Dsonar.java.checkstyle.reportPaths=target/checkstyle-result.xml
                    """
                }
            }
        }

        stage("Quality Gate"){
            steps {
                timeout(time: 60, unit: 'MINUTES') {
                    waitForQualityGate abortPipeline: true
                }
            }
        }

        stage("Upload Artifact to Nexus") {
            steps {
                nexusArtifactUploader(
                    nexusVersion: 'nexus3',
                    protocol: 'http',
                    nexusUrl: "${NEXUSIP}:${NEXUSPORT}",
                    groupId: 'GROUP_ID',
                    version: "${BUILD_ID}-${BUILD_TIMESTAMP}",
                    repository: "${RELEASE_REPO}",
                    credentialsId: "${NEXUS_LOGIN}",
                    artifacts: [[
                        artifactId: 'APP_ARTIFACT',
                        classifier: '',
                        file: 'target/*.war',
                        type: 'war'
                    ]]
                )
            }
        }

        stage('Build Docker') {
            steps {
                script {
                    executeCommand("docker build -t ${DOCKER_REGISTRY}/${DOCKER_IMAGE}:${DOCKER_TAG} .", 'Docker build failed')
                }
            }
        }

        stage('Trivy Image Scan') {
            steps {
                executeCommand("trivy image ${DOCKER_REGISTRY}/${DOCKER_IMAGE}:${DOCKER_TAG}", 'Trivy image scan failed')
            }
        }

        stage('Docker Push') {
            steps {
                script {
                    withCredentials([usernamePassword(credentialsId: "${DOCKER_CREDS}", passwordVariable: 'PASS', usernameVariable: 'USER')]) {
                        executeCommand("echo \${PASS} | docker login -u \${USER} --password-stdin ${DOCKER_REGISTRY}", 'Docker login failed')
                        executeCommand("docker push ${DOCKER_REGISTRY}/${DOCKER_IMAGE}:${DOCKER_TAG}", 'Docker push failed')
                        executeCommand("docker rmi -f \$(docker images -qa)", 'Docker cleanup failed')
                    }
                }
            }
        }

        stage('Azure Login') {
            steps {
                script {
                    withCredentials([azureServicePrincipal(credentialsId: "${AZURE_CREDENTIALS}", variable: 'AZURE')]) {
                        executeCommand("az login --service-principal --username \$AZURE_CLIENT_ID --password \$AZURE_CLIENT_SECRET --tenant \$AZURE_TENANT_ID", 'Azure login failed')
                    }
                }
            }
        }

        stage('Provision AKS Cluster') {
            steps {
                script {
                    dir('terraform') {
                        executeCommand('terraform init', 'Terraform initialization failed')
                        executeCommand('terraform apply --auto-approve', 'Terraform apply failed')
                    }
                }
            }
        }

        stage('Deploy App on Kubernetes') {
            steps {
                script {
                    dir('kubernetes-files') {
                        executeCommand('kubectl apply -f .', 'App deployment failed')
                    }
                }
            }
        }
    }

    post {
        always {
            echo 'Sending Slack Notification...'
            slackSend channel: '#devops-cicd-pipeline',
                color: COLOR_MAP[currentBuild.currentResult],
                message: "*${currentBuild.currentResult}:* Job ${env.JOB_NAME} build ${env.BUILD_NUMBER} \n More info: ${env.BUILD_URL}"
        }
    }
}

def executeCommand(command, errorMessage) {
    script {
        def result = sh(script: command, returnStatus: true)
        if (result != 0) {
            currentBuild.result = 'FAILURE'
            echo "${errorMessage} (Exit code: ${result})"
        }
    }
}
